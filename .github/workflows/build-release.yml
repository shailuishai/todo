# .github/workflows/build-release.yml
name: Build & Release Flutter App

# Запускается при создании тега, начинающегося с 'v'
on:
  push:
    tags:
      - 'v*'

jobs:
  build-linux-appimage:
    name: Build Linux AppImage (x86_64)
    runs-on: ubuntu-latest

    steps:
      # 1. Загружаем код всего репозитория
      - name: Checkout repository
        uses: actions/checkout@v4

      # 2. Устанавливаем Flutter SDK
      - name: Set up Flutter
        uses: subosito/flutter-action@v2
        with:
          channel: 'stable'

      # 3. Собираем Linux билд, указав путь к проекту
      - name: Build Flutter Linux
        run: flutter build linux --target-platform=linux-x64
        working-directory: ./client # <--- Указываем, где находится Flutter проект

      # 4. Устанавливаем appimage-builder
      - name: Download appimage-builder
        run: |
          wget https://github.com/AppImage/appimage-builder/releases/download/v1.1.0/appimage-builder-1.1.0-x86_64.AppImage -O appimage-builder
          chmod +x appimage-builder
          sudo mv appimage-builder /usr/local/bin/

      # 5. Создаем рецепт для AppImage в корне проекта
      - name: Create AppImage Recipe
        run: |
          cat > appimage-builder.yml <<EOF
          version: 1
          script:
            # Копируем уже собранный бандл из папки client/build/...
            - cp -r client/build/linux/x64/release/bundle/* AppDir/
            # Копируем иконку из ассетов
            - cp client/assets/icons/logo.svg AppDir/com.yourcompany.todo.svg
            # Копируем .desktop файл
            - cp client/appimage_builder/client.desktop AppDir/com.yourcompany.todo.desktop
          AppDir:
            path: \$(pwd)/AppDir
            app_info:
              id: com.yourcompany.todo
              name: ToDo
              icon: com.yourcompany.todo
              version: ${{ github.ref_name }}
              exec: client
            apt:
              arch: amd64
              sources:
                - sourceline: "deb http://archive.ubuntu.com/ubuntu/ focal main restricted universe multiverse"
              include:
                - libgtk-3-0
                - libsecret-1-0
          AppImage:
            arch: x86_64
            # Замените DIIASA/ToDo на ваше имя пользователя и репозиторий
            update-information: "gh-releases-zsync|DIIASA|ToDo|latest|ToDo-*-x86_64.AppImage.zsync"
          EOF

      # 6. Запускаем сборку AppImage из корня проекта
      - name: Build AppImage
        run: appimage-builder --recipe appimage-builder.yml

      # 7. Переименовываем артефакт для релиза
      - name: Rename Artifact
        run: mv ToDo-*.AppImage ToDo-${{ github.ref_name }}-Linux-x86_64.AppImage

      # 8. Создаем релиз и загружаем в него AppImage
      - name: Create GitHub Release and Upload Asset
        uses: softprops/action-gh-release@v2
        with:
          # Загружаем все файлы, подходящие под маску
          files: ToDo-*.AppImage