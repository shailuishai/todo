# .github/workflows/build-release.yml
name: Build & Release Flutter App

on:
  push:
    tags:
      - 'v*'

jobs:
  build-linux:
    name: Build Linux AppImage (x86_64)
    runs-on: ubuntu-latest

    steps:
      # 1. Загружаем код из репозитория
      - name: Checkout repository
        uses: actions/checkout@v4

      # 2. Устанавливаем Flutter SDK
      - name: Set up Flutter
        uses: subosito/flutter-action@v2
        with:
          channel: 'stable'

      # 3. Устанавливаем ВСЕ системные зависимости
      - name: Install Build and Runtime Dependencies
        run: |
          sudo apt-get update -y
          sudo apt-get install -y ninja-build libgtk-3-dev libsecret-1-dev libappindicator3-dev libfuse2

      # 4. Собираем Linux билд
      - name: Build Flutter Linux
        run: flutter build linux --release
        working-directory: ./client

      # 5. Устанавливаем инструмент для сборки AppImage
      - name: Download appimage-builder
        run: |
          wget "https://github.com/AppImageCrafters/appimage-builder/releases/download/v1.1.0/appimage-builder-1.1.0-x86_64.AppImage" -O appimage-builder
          chmod +x appimage-builder
          sudo mv appimage-builder /usr/local/bin/

      # 6. Создаем простой рецепт (БЕЗ СЕКЦИИ APT)
      - name: Create AppImage Recipe
        run: |
          # Рабочая директория сейчас - корень репозитория
          # Создаем папку для сборки AppImage
          mkdir -p build-appimage/AppDir
          
          # Копируем скомпилированное приложение
          cp -r client/build/linux/x64/release/bundle/* build-appimage/AppDir/
          
          # Копируем desktop-файл и иконку
          cp client/appimage_builder/client.desktop build-appimage/AppDir/
          cp client/appimage_builder/client.png build-appimage/AppDir/
          
          # Создаем рецепт внутри папки сборки
          cat > build-appimage/appimage-builder.yml <<EOF
          version: 1
          AppDir:
            path: $(pwd)/AppDir
          
            app_info:
              id: com.yourcompany.todo
              name: ToDo
              icon: client
              version: ${{ github.ref_name }}
              exec: client
              exec_args: ""

            # Runtime теперь не нужен, builder сам найдет зависимости из установленных пакетов
            runtime:
              generator: appimage-runtime-bundle
          
          AppImage:
            arch: x86_64
            update-information: "gh-releases-zsync|DIIASA|ToDo|latest|ToDo-*-x86_64.AppImage.zsync"
          EOF

      # 7. Запускаем сборку AppImage из папки сборки
      - name: Build AppImage
        run: |
          cd build-appimage
          appimage-builder --recipe appimage-builder.yml

      # 8. Переименовываем артефакт для релиза
      - name: Rename Artifact
        run: mv build-appimage/ToDo-*.AppImage ToDo-${{ github.ref_name }}-Linux-x86_64.AppImage

      # 9. Создаем релиз и загружаем в него AppImage
      - name: Create GitHub Release and Upload Asset
        uses: softprops/action-gh-release@v2
        with:
          files: ToDo-*.AppImage