# Имя нашего workflow, которое будет отображаться в GitHub Actions
name: Build and Release

# Триггеры для запуска workflow
on:
  # Запускать при каждом пуше в ветку main
  push:
    branches:
      - 'main'
  # Позволяет запускать этот workflow вручную со страницы Actions в GitHub
  workflow_dispatch:

# Устанавливаем права для workflow. Нам нужна запись в 'contents' для создания релиза.
permissions:
  contents: write

jobs:
  # --- ЗАДАЧА СБОРКИ ДЛЯ LINUX (.AppImage) ---
  build-linux:
    name: Build Linux AppImage
    runs-on: ubuntu-latest

    steps:
      # 1. Клонируем репозиторий
      - name: Checkout repository
        uses: actions/checkout@v4

      # 2. Устанавливаем Flutter SDK
      - name: Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          channel: 'stable'

      # 3. Устанавливаем системные зависимости
      - name: Install Linux dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y clang cmake ninja-build pkg-config libgtk-3-dev liblzma-dev fuse libsecret-1-dev

      # 4. Получаем зависимости Flutter
      - name: Get Flutter dependencies
        run: flutter pub get
        working-directory: ./client

      # 5. Собираем релизную версию для Linux
      - name: Build Flutter Linux release
        run: flutter build linux --release
        working-directory: ./client

      # 6. !! ИСПРАВЛЕНИЕ: Готовим файлы для AppImage (добавляем иконку)
      - name: Prepare files for AppImage
        run: |
          APPDIR=client/build/linux/x64/release/bundle
          # Предполагаем, что иконка есть в client/assets/icons/logo.png
          # Если у вас ее нет, создайте или используйте другой путь
          cp client/assets/icons/logo.svg $APPDIR/ # Копируем SVG
          # Создаем PNG из SVG для .desktop файла (если imagemagick установлен)
          # Или просто положите готовый icon.png в assets
          # sudo apt-get install -y imagemagick
          # convert -background none $APPDIR/logo.svg $APPDIR/icon.png

          echo "[Desktop Entry]
          Name=ToDo
          Exec=client
          Icon=logo
          Type=Application
          Categories=Utility;" > $APPDIR/client.desktop
          chmod +x $APPDIR/client

      # 7. Скачиваем утилиту для создания AppImage
      - name: Download appimagetool
        run: |
          wget -q "https://github.com/AppImage/AppImageKit/releases/download/13/appimagetool-x86_64.AppImage"
          chmod +x appimagetool-x86_64.AppImage

      # 8. Создаем AppImage
      - name: Build AppImage
        run: ./appimagetool-x86_64.AppImage ./client/build/linux/x64/release/bundle/

      # 9. !! ИСПРАВЛЕНИЕ: Переименовываем результат в ожидаемое имя !!
      - name: Rename AppImage
        run: |
          ls
          mv ./ToDo-x86_64.AppImage ./ToDo_Linux-x86_64.AppImage

      # 10. Загружаем собранный файл как артефакт
      - name: Upload AppImage artifact
        uses: actions/upload-artifact@v4
        with:
          name: ToDo_Linux-x86_64.AppImage # Имя артефакта лучше делать как имя файла
          path: ./ToDo_Linux-x86_64.AppImage

  # --- ЗАДАЧА СБОРКИ ДЛЯ WINDOWS (.exe) ---
  build-windows:
    name: Build Windows Executable
    runs-on: windows-latest

    steps:
      # 1. Клонируем репозиторий
      - name: Checkout repository
        uses: actions/checkout@v4

      # 2. Устанавливаем Flutter SDK
      - name: Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          channel: 'stable'

      # 3. Включаем поддержку сборки для Windows
      - name: Enable Windows desktop support
        run: flutter config --enable-windows-desktop

      # 4. ОЧИЩАЕМ СТАРЫЕ СБОРКИ (НОВЫЙ ШАГ)
      - name: Run Flutter Clean
        run: flutter clean
        working-directory: ./client

      # 5. Запускаем flutter pub get
      - name: Get Flutter dependencies
        run: flutter pub get
        working-directory: ./client

      # 6. Собираем .exe файл
      - name: Build Windows executable
        run: flutter build windows --release
        working-directory: ./client

      # 7. Архивируем результат в ZIP для удобства
      - name: Archive Release folder
        run: Compress-Archive -Path client/build/windows/x64/runner/Release -DestinationPath ToDo_Windows-x86_64.zip

      - name: Upload ZIP artifact
        uses: actions/upload-artifact@v4
        with:
          name: ToDo_Windows-x86_64.zip # Имя артефакта лучше делать как имя файла
          path: ToDo_Windows-x86_64.zip

  # --- ЗАДАЧА СБОРКИ ДЛЯ ANDROID (.apk) ---
  build-android:
    name: Build Android APK
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Java
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '17'

      - name: Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          channel: 'stable'

      - name: Get Flutter dependencies
        run: flutter pub get
        working-directory: ./client

      - name: Build Android APK
        run: flutter build apk --release
        working-directory: ./client

      # !! ИСПРАВЛЕНИЕ: Переименовываем стандартный app-release.apk в ToDo.apk !!
      - name: Rename APK
        run: mv client/build/app/outputs/flutter-apk/app-release.apk client/build/app/outputs/flutter-apk/ToDo.apk

      - name: Upload APK artifact
        uses: actions/upload-artifact@v4
        with:
          name: ToDo.apk # Имя артефакта лучше делать как имя файла
          path: client/build/app/outputs/flutter-apk/ToDo.apk

  # --- ЗАДАЧА СОЗДАНИЯ РЕЛИЗА ---
  create-release:
    name: Create or Update GitHub Release
    needs: [build-linux, build-windows, build-android]
    runs-on: ubuntu-latest

    steps:
      # 1. Скачиваем все артефакты. Теперь они будут скачаны в текущую директорию.
      - name: Download all build artifacts
        uses: actions/download-artifact@v4
        with:
          path: ./artifacts # Скачиваем все в одну папку artifacts

      # 2. Создаем или ОБНОВЛЯЕМ релиз на GitHub
      - name: Create or Update Release and Upload Assets
        uses: softprops/action-gh-release@v2
        with:
          tag_name: "latest"
          name: "Latest Build (${{ github.sha }})"
          body: |
            Автоматическая сборка из коммита: ${{ github.sha }}
          # !! ИСПРАВЛЕНИЕ: Упрощенный путь к файлам !!
          files: ./artifacts/*/* # Теперь этот путь будет работать, т.к. артефакты имеют имена файлов