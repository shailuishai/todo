# .github/workflows/build-release.yml
name: Build & Release Flutter App

on:
  push:
    tags:
      - 'v*'

jobs:
  build-and-release-linux:
    name: Build and Release Linux AppImage
    runs-on: ubuntu-20.04 # Используем Focal (20.04), так как он совместим с рецептом

    steps:
      # 1. Загружаем код репозитория
      - name: Checkout repository
        uses: actions/checkout@v4

      # 2. Устанавливаем Flutter SDK
      - name: Set up Flutter
        uses: subosito/flutter-action@v2
        with:
          channel: 'stable'

      # 3. Устанавливаем системные зависимости для сборки
      - name: Install build dependencies
        run: |
          sudo apt-get update -y
          sudo apt-get install -y ninja-build libgtk-3-dev libsecret-1-dev libappindicator3-dev fuse

      # 4. Собираем Linux билд
      - name: Build Flutter Linux
        run: flutter build linux --release
        working-directory: ./client # Указываем, где находится Flutter проект

      # 5. Устанавливаем appimage-builder
      - name: Install appimage-builder
        run: |
          # Используем pip, так как в окружении Ubuntu это работает надежно
          pip install appimage-builder

      # 6. Создаем рецепт AppImage, адаптированный из официального примера
      - name: Create AppImage Recipe
        run: |
          # Создаем рецепт в корневой папке проекта
          cat > AppImageBuilder.yml <<EOF
          version: 1
          
          script:
            # Этот скрипт выполняется из корня проекта, где лежит этот YML
            - rm -rf AppDir || true
            # Копируем скомпилированное приложение
            - cp -r client/build/linux/x64/release/bundle AppDir
            - mkdir -p AppDir/usr/share/icons/hicolor/256x256/apps/
            # Копируем нашу иконку из ассетов в нужное место
            - cp client/assets/icons/logo.svg AppDir/usr/share/icons/hicolor/256x256/apps/com.yourcompany.todo.svg
            # Создаем симлинк для .desktop файла
            - ln -s /usr/share/applications/com.yourcompany.todo.desktop AppDir/com.yourcompany.todo.desktop

          AppDir:
            path: $(pwd)/AppDir
          
            app_info:
              id: com.yourcompany.todo
              name: ToDo
              icon: com.yourcompany.todo
              version: ${{ github.ref_name }}
              exec: bundle/client # Путь к исполняемому файлу внутри AppDir

            # Используем секцию apt, как в примере, для максимальной совместимости
            apt:
              arch: amd64
              sources:
                - sourceline: "deb http://archive.ubuntu.com/ubuntu/ focal main restricted universe multiverse"
              include:
                - libgtk-3-0
                - libsecret-1-0
                - libnotify4
                - libayatana-appindicator3-1
          
            # Исключаем ненужные файлы для уменьшения размера
            files:
              exclude:
                - usr/share/man
                - usr/share/doc/*/README.*
                - usr/share/doc/*/changelog.*
          
            # Указываем путь к модулям GTK
            runtime:
              env:
                GIO_MODULE_DIR: \$APPDIR/usr/lib/x86_64-linux-gnu/gio/modules/

          AppImage:
            arch: x86_64
            update-information: "gh-releases-zsync|DIIASA|ToDo|latest|ToDo-*-x86_64.AppImage.zsync"
          EOF

      # 7. Запускаем сборку AppImage
      - name: Build AppImage
        run: appimage-builder --recipe AppImageBuilder.yml

      # 8. Переименовываем артефакт для релиза
      - name: Rename Artifact
        run: mv ToDo-*.AppImage ToDo-${{ github.ref_name }}-Linux-x86_64.AppImage

      # 9. Создаем релиз и загружаем в него AppImage
      - name: Create GitHub Release and Upload Asset
        uses: softprops/action-gh-release@v2
        with:
          files: ToDo-*.AppImage