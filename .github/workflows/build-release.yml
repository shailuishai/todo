# Имя нашего workflow, которое будет отображаться в GitHub Actions
name: Build and Release

# Триггеры для запуска workflow
on:
  # Запускать при каждом пуше в ветку main
  push:
    branches:
      - 'main'
  # Позволяет запускать этот workflow вручную со страницы Actions в GitHub
  workflow_dispatch:

# Устанавливаем права для workflow. Нам нужна запись в 'contents' для создания релиза.
permissions:
  contents: write

jobs:
  # --- ЗАДАЧА СБОРКИ ДЛЯ LINUX (.AppImage) ---
  build-linux:
    name: Build Linux AppImage
    runs-on: ubuntu-latest # Используем последнюю версию Ubuntu

    steps:
      # 1. Клонируем репозиторий
      - name: Checkout repository
        uses: actions/checkout@v4

      # 2. Устанавливаем Flutter SDK
      - name: Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          channel: 'stable' # Используем стабильный канал Flutter

      # 3. Устанавливаем зависимости для сборки под Linux
      - name: Install Linux dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y clang cmake ninja-build pkg-config libgtk-3-dev liblzma-dev libgstreamer1.0-dev libgstreamer-plugins-base1.0-dev

      # 4. Запускаем flutter pub get в директории 'client'
      - name: Get Flutter dependencies
        run: flutter pub get
        working-directory: ./client # <--- Важный шаг: указываем рабочую директорию

      # 5. Собираем AppImage с помощью специального action
      - name: Build Flutter AppImage
        uses: local-actions/flutter-build-appimage@v1
        with:
          project-path: ./client # <--- Указываем путь к проекту

      # 6. Загружаем собранный файл как артефакт, чтобы передать его в задачу создания релиза
      - name: Upload AppImage artifact
        uses: actions/upload-artifact@v4
        with:
          name: linux-build # Имя артефакта
          path: client/build/linux/x64/release/bundle/*.AppImage # Путь к файлу

  # --- ЗАДАЧА СБОРКИ ДЛЯ WINDOWS (.exe) ---
  build-windows:
    name: Build Windows Executable
    runs-on: windows-latest # Используем последнюю версию Windows

    steps:
      # 1. Клонируем репозиторий
      - name: Checkout repository
        uses: actions/checkout@v4

      # 2. Устанавливаем Flutter SDK
      - name: Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          channel: 'stable'

      # 3. Запускаем flutter pub get
      - name: Get Flutter dependencies
        run: flutter pub get
        working-directory: ./client

      # 4. Включаем поддержку сборки для Windows
      - name: Enable Windows desktop support
        run: flutter config --enable-windows-desktop

      # 5. Собираем .exe файл
      - name: Build Windows executable
        run: flutter build windows --release
        working-directory: ./client

      # 6. Архивируем результат в ZIP для удобства
      - name: Archive Release folder
        run: Compress-Archive -Path client/build/windows/x64/runner/Release -DestinationPath client/build/windows/x64/Release.zip

      # 7. Загружаем архив как артефакт
      - name: Upload ZIP artifact
        uses: actions/upload-artifact@v4
        with:
          name: windows-build
          path: client/build/windows/x64/Release.zip

  # --- ЗАДАЧА СБОРКИ ДЛЯ ANDROID (.apk) ---
  build-android:
    name: Build Android APK
    runs-on: ubuntu-latest

    steps:
      # 1. Клонируем репозиторий
      - name: Checkout repository
        uses: actions/checkout@v4

      # 2. Устанавливаем Java (необходима для сборки под Android)
      - name: Setup Java
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '17'

      # 3. Устанавливаем Flutter SDK
      - name: Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          channel: 'stable'

      # 4. Запускаем flutter pub get
      - name: Get Flutter dependencies
        run: flutter pub get
        working-directory: ./client

      # 5. Собираем .apk файл
      - name: Build Android APK
        run: flutter build apk --release
        working-directory: ./client

      # 6. Загружаем .apk как артефакт
      - name: Upload APK artifact
        uses: actions/upload-artifact@v4
        with:
          name: android-build
          path: client/build/app/outputs/flutter-apk/app-release.apk

  # --- ЗАДАЧА СОЗДАНИЯ РЕЛИЗА ---
  create-release:
    name: Create GitHub Release
    # Эта задача зависит от успешного выполнения всех задач сборки
    needs: [build-android]
    runs-on: ubuntu-latest

    steps:
      # 1. Скачиваем все артефакты (AppImage, zip, apk), собранные в предыдущих задачах
      - name: Download all build artifacts
        uses: actions/download-artifact@v4
        with:
          path: ./artifacts # Скачиваем в папку 'artifacts'

      # 2. Создаем релиз на GitHub и прикрепляем к нему наши файлы
      - name: Create Release and Upload Assets
        uses: softprops/action-gh-release@v2
        with:
          # Имя тега будет названием релиза. Например, 'v1.0.0'
          tag_name: ${{ github.ref }}
          # Имя релиза
          name: Release ${{ github.ref_name }}
          # Описание релиза (можно оставить пустым или генерировать автоматически)
          body: |
            Автоматически сгенерированный релиз для версии ${{ github.ref_name }}
          # Файлы, которые нужно прикрепить. '*' найдет все файлы во всех подпапках.
          files: |
            ./artifacts/*/*
