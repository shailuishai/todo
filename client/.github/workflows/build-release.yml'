name: Build & Release

# Этот workflow будет запускаться, когда вы создаете новый тег, начинающийся с 'v'
# Например: v1.0.0, v1.1.0-beta
on:
  push:
    tags:
      - 'v*'

jobs:
  build-appimage:
    # Имя задачи
    name: Build AppImage (${{ matrix.arch }})

    # Стратегия: запустить эту задачу для каждой архитектуры из списка
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            arch: x86_64
            target: linux-x64
          # Если вам понадобится ARM, просто раскомментируйте этот блок
          # - os: ubuntu-latest # GitHub Actions для ARM пока в бете и могут требовать спец. раннеры
          #   arch: aarch64
          #   target: linux-arm64

    # Запускаем на виртуальной машине Ubuntu
    runs-on: ${{ matrix.os }}

    steps:
      # 1. Загружаем исходный код вашего репозитория
      - name: Checkout repository
        uses: actions/checkout@v4

      # 2. Устанавливаем Flutter SDK
      - name: Set up Flutter
        uses: subosito/flutter-action@v2
        with:
          channel: 'stable'

      # 3. Собираем билд для Linux
      - name: Build Flutter (Linux ${{ matrix.arch }})
        run: flutter build linux --target-platform=${{ matrix.target }}

      # 4. Устанавливаем `appimage-builder` (здесь он точно сработает)
      - name: Install appimage-builder
        run: pip install appimage-builder

      # 5. Создаем файлы для AppImage
      # Вместо того чтобы хранить их в репозитории, мы создаем их на лету
      - name: Create AppImage assets
        run: |
          # Создаем .desktop файл
          cat > build/linux/${{ matrix.target }}/release/bundle/client.desktop <<EOF
          [Desktop Entry]
          Name=ToDo
          Exec=client
          Icon=com.yourcompany.todo
          Type=Application
          Categories=Utility;Office;
          EOF

          # Копируем иконку из ваших ассетов
          # Убедитесь, что путь `assets/icons/logo.svg` правильный
          cp assets/icons/logo.svg build/linux/${{ matrix.target }}/release/bundle/com.yourcompany.todo.svg

      # 6. Создаем рецепт AppImage
      - name: Create AppImage recipe
        run: |
          cat > build/linux/${{ matrix.target }}/release/bundle/appimage-builder.yml <<EOF
          version: 1

          AppDir:
            path: $(pwd) # Используем текущую директорию bundle как AppDir

            app_info:
              id: com.yourcompany.todo
              name: ToDo
              icon: com.yourcompany.todo
              version: ${{ github.ref_name }} # Версия из тега, например, v1.0.0
              exec: client
              exec_args: ""

            apt:
              arch: ${{ matrix.arch == 'x86_64' && 'amd64' || 'arm64' }}
              sources:
                - sourceline: "deb http://archive.ubuntu.com/ubuntu/ focal main restricted universe multiverse"
                  key_url: "http://keyserver.ubuntu.com/pks/lookup?op=get&search=0x3b4fe6acc0b21f32"
              include:
                - libgtk-3-0
                - libsecret-1-0
                - libnotify4
                - libayatana-appindicator3-1

          AppImage:
            arch: ${{ matrix.arch }}
            update-information: "gh-releases-zsync|DIIASA|ToDo|latest|ToDo-${{ matrix.arch }}.AppImage.zsync"

          EOF

      # 7. Запускаем appimage-builder
      - name: Run appimage-builder
        run: |
          cd build/linux/${{ matrix.target }}/release/bundle
          appimage-builder --recipe appimage-builder.yml

      # 8. Переименовываем готовый файл для загрузки
      - name: Rename AppImage artifact
        run: |
          mv build/linux/${{ matrix.target }}/release/bundle/ToDo-*.AppImage ToDo-${{ github.ref_name }}-${{ matrix.arch }}.AppImage

      # 9. Сохраняем готовый AppImage как артефакт этого workflow
      - name: Upload AppImage artifact
        uses: actions/upload-artifact@v4
        with:
          name: ToDo-AppImage-${{ matrix.arch }}
          path: ToDo-*.AppImage

  # Вторая задача: создание релиза на GitHub
  release:
    # Эта задача зависит от успешного завершения `build-appimage`
    needs: build-appimage
    runs-on: ubuntu-latest

    steps:
      # 1. Загружаем артефакты (наши AppImage файлы) из предыдущей задачи
      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts/

      # 2. Создаем релиз и прикрепляем к нему все файлы из папки artifacts
      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          files: artifacts/*/*.AppImage